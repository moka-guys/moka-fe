Option Compare Database
' s0901_NGSVariantACMGPopup
'     Assign evidence and ACMG classifications to an NGSVariant.NGSVariantID record.
'   - Procedures: Main functions and routines
'   - User Interface Events: Routines trigerred by Form UI
'   - Loggers: Functions for logging events to MokaDB

' #####
' Procedures
' #####

Private Sub SetEvidenceCounts()
    'Sets the ACMG evidence counters from selected criteria tickboxes.
    'Counter controls are used to set, access and display the evidence values. These are accessed by the following properties:
    '    Me.PVS_count, Me.PS_count, Me.PM_count, Me.PP_count, Me.BA_count, Me.BS_count, Me.BP_count
    
    ' Objects for querying the moka database
    Dim Dbs As dao.Database
    ' Recordset for NGSVariantACMG Table
    Dim rsNVA As dao.Recordset
    ' Arrays for ACMG fields
    Dim pathogenicArray() As Variant
    Dim benignArray() As Variant
    ' Constants for ACMG evidence
    Dim VERYSTRONG As Integer
    Dim STRONG As Integer
    Dim MODERATE As Integer
    Dim SUPPORTING As Integer
    Dim STANDALONE As Integer
    ' Variables to increment counts.
    '    These are used in place of counter controls so that counts are reset each time the procedure is called.
    Dim PVS_count As Integer  'Pathogenic Very Strong
    Dim PS_count As Integer   'Pathogenic Strong
    Dim PM_count As Integer   'Pathogenic Moderate
    Dim PP_count As Integer   'Pathogenic Supporting
    Dim BA_count As Integer   'Benign Standalone
    Dim BS_count As Integer   'Benign Strong
    Dim BP_count As Integer   'Benign Supporting
    
    'Set constants for evidence levels. These are ItemIDs found under dbo.Item.ItemCategoryIndexID = 78
    VERYSTRONG = 3366
    STRONG = 3367
    MODERATE = 3368
    SUPPORTING = 3369
    STANDALONE = 3370
    
    'Get NGSVariantACMG recordset for the variant currently displayed in the form
    strSQL = "SELECT * FROM NGSVariantACMG WHERE NGSVariantACMGID = " & Me.NGSVariantACMGID
    Set Dbs = CurrentDb
    Set rsNVA = Dbs.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)
    'Create arrays for pathogenic and benign ACMG fields respectively. This allows us to count their respective evidence levels.
    pathogenicArray = Array(rsNVA!PVS1, rsNVA!PS1, rsNVA!PS2, rsNVA!PS3, rsNVA!PS4, rsNVA!PM1, rsNVA!PM2, _
        rsNVA!PM3, rsNVA!PM4, rsNVA!PM5, rsNVA!PM6, rsNVA!PP1, rsNVA!PP2, rsNVA!PP3, rsNVA!PP4, rsNVA!PP5)
    benignArray = Array(rsNVA!BA1, rsNVA!BS1, rsNVA!BS2, rsNVA!BS3, rsNVA!BS4, rsNVA!BP1, rsNVA!BP2, _
        rsNVA!BP3, rsNVA!BP4, rsNVA!BP5, rsNVA!BP6, rsNVA!BP7)
    
    'Loop through Pathogenic fields and populate counts
    For Each Element In pathogenicArray
        Select Case Element
            Case VERYSTRONG
                PVS_count = PVS_count + 1
            Case STRONG
                PS_count = PS_count + 1
            Case MODERATE
                PM_count = PM_count + 1
            Case SUPPORTING
                PP_count = PP_count + 1
            Case Else
        End Select
    Next Element
    
    'Loop through Benign fields and populate counts
    For Each Element In benignArray
        Select Case Element
            Case STANDALONE
                BA_count = BA_count + 1
            Case STRONG
                BS_count = BS_count + 1
            Case SUPPORTING
                BP_count = BP_count + 1
            Case Else
        End Select
    Next Element
    
    'Close recordset
    rsNVA.close
    
    'Set evidence counts to their respective counter objects in the form
    Me.PVS_count = PVS_count
    Me.PS_count = PS_count
    Me.PM_count = PM_count
    Me.PP_count = PP_count
    Me.BA_count = BA_count
    Me.BS_count = BS_count
    Me.BP_count = BP_count
    Debug.Print "EvidenceCounts Return:", PVS_count, PS_count, PM_count, PP_count, BA_count, BS_count, BP_count

End Sub

Public Function GetACMGClassification() As Variant
    ' Calculates the ACMG classification from selected evidence categories. Reports the strongest criteria met and the rule that invoked it.
    ' Returns:
    '    Array(ACMG classification As Integer, ACMG rule applied AS String)
    Dim isPathogenic As Boolean: isPathogenic = False
    Dim isLikelyPathogenic As Boolean: isLikelyPathogenic = False
    Dim isUncertain As Boolean: isUncertain = False
    Dim isLikelyBenign As Boolean: isLikelyBenign = False
    Dim isBenign As Boolean: isBenign = False
    
    ' Define intermediate variables for selected rules
    Dim path_rule As String
    Dim lpath_rule As String
    Dim lbenign_rule As String
    Dim benign_rule As String
    Dim vus_rule As String
    
    ' Function Return Values:
    ' Variable to hold final classification as integer
    '    1 is Benign, 2 is Likely benign, 3 is Uncertain significance, 4 is Likely pathogenic, 5 is Pathogenic
    Dim Classification As Integer
    ' Final ACMG rule for selected criteria as free text
    Dim rule_applied As String

    
    '### Pathogenic Criteria
    ' Pathogenic (i) 1 Very Strong AND (1 Strong OR 1 Moderate OR 2 Supporting)
    ' Pathogenic (ii) 2 Strong AND (1 Moderate or 2 Supporting)
    ' Pathogenic (iii) 1 Strong AND (3 Moderate OR [2 Moderate and 2 Supporting] OR [1 Moderate and 4 Supporting])
    ' Pathogenic (iv) 3 or more Strong
    If (Me.PVS_count >= 1 And (Me.PS_count >= 1 Or Me.PM_count >= 1 Or Me.PP_count >= 2)) Then
        path_rule = "Pathogenic (i) 1 Very Strong AND (1 Strong OR 1 Moderate OR 2 Supporting)"
        isPathogenic = True
    ElseIf (Me.PS_count >= 2 And (Me.PM_count >= 1 Or Me.PP_count >= 2)) Then
        path_rule = "Pathogenic (ii) 2 Strong AND (1 Moderate or 2 Supporting)"
        isPathogenic = True
    ElseIf (Me.PS_count >= 1 And ( _
             Me.PM_count >= 3 Or _
            (Me.PM_count >= 2 And Me.PP_count >= 2) Or _
            (Me.PM_count >= 1 And Me.PP_count >= 4) _
            )) Then
        path_rule = "Pathogenic (iii) 1 Strong AND (3 Moderate OR [2 Moderate and 2 Supporting] OR [1 Moderate and 4 Supporting])"
        isPathogenic = True
    ElseIf (Me.PS_count >= 3) Then
        path_rule = "Pathogenic (iv) 3 or more Strong"
        isPathogenic = True
    Else
        path_rule = "None"
        isPathogenic = False
    End If
    
    '### Likely Pathogenic Criteria
    ' Likely Pathogenic (i) 2 Strong, (ii) 1 Strong and 1 Moderate, (iii) 1 Strong and 2 Supporting
    '    (iv) 3 Moderate, (v) 2 Moderate and 2 Supporting, (vi) 1 Moderate and 4 Supporting
    If Me.PS_count >= 2 Then
        lpath_rule = "Likely pathogenic (i) 2 Strong"
        isLikelyPathogenic = True
    ElseIf (Me.PS_count = 1 And Me.PM_count >= 1) Then
        lpath_rule = "Likely pathogenic (ii) Strong and 1 Moderate"
        isLikelyPathogenic = True
    ElseIf (Me.PS_count >= 1 And Me.PP_count >= 2) Then
        lpath_rule = "Likely Pathogenic (iii) 1 Strong and 2 Supporting"
        isLikelyPathogenic = True
    ElseIf Me.PM_count >= 3 Then
        lpath_rule = "Likely pathogenic (iv) 3 Moderate"
        isLikelyPathogenic = True
    ElseIf (Me.PM_count = 2 And Me.PP_count >= 2) Then
        lpath_rule = "Likely pathogenic (v) 2 Moderate and 2 Supporting"
        isLikelyPathogenic = True
    ElseIf (Me.PM_count = 1 And Me.PP_count >= 4) Then
        lpath_rule = "Likely pathogenic (vi) 1 Moderate and 4 Supporting"
        isLikelyPathogenic = True
    Else
        lpath_rule = "None"
        isLikelyPathogenic = False
    End If
    
    '### Likely Benign Criteria
    ' (i) 1 Strong and 1 Supporting, (ii) 2 Supporting
    If (Me.BS_count >= 1 And Me.BP_count >= 1) Then
        lbenign_rule = "Likely Benign (i) 1 Strong and 1 Supporting"
        isLikelyBenign = True
    ElseIf Me.BP_count >= 2 Then
        lbenign_rule = "Likely Benign (ii) 2 Supporting"
        isLikelyBenign = True
    Else
        lbenign_rule = "None"
        isLikelyBenign = False
    End If
    
    '### Benign Criteria
    ' (i) 1 StandAlone, (ii) 2 Strong
    If Me.BA_count >= 1 Then
        benign_rule = "Benign (i) 1 StandAlone"
        isBenign = True
    ElseIf Me.BS_count >= 2 Then
        benign_rule = "Benign (ii) 2 Strong"
        isBenign = True
    Else
        benign_rule = "None"
        isBenign = False
    End If
    
    '### Uncertain Significance Criteria
    ' (i) No other criteria met, (ii) Benign and Pathogenic criteria contradict
    If (isPathogenic = False And isLikelyPathogenic = False And isBenign = False And isLikelyBenign = False) Then
        vus_rule = "Uncertain Significance (i) No other criteria met"
        isUncertain = True
    ElseIf ((isLikelyBenign = True Or isBenign = True) And (isLikelyPathogenic = True Or isPathogenic = True)) Then
        vus_rule = "Uncertain Significance (ii) Benign and Pathogenic criteria contradict"
        isUncertain = True
    Else
        vus_rule = "None"
        isUncertain = False
    End If
    
    '### Calculate ACMG classification
    ' As per ACMG rules, calculation gives presidence to VUS criteria, then Pathogenic Or Benign, then LikelyPathogenic or LikelyBenign.
    ' 1 = Benign, 2 = Likely benign, 3 = Uncertain significance, 4 = Likely pathogenic, 5 = Pathogenic
    If isUncertain = True Then
        Classification = 3
        rule_applied = vus_rule
    ElseIf isPathogenic Then
        Classification = 5
        rule_applied = path_rule
    ElseIf isBenign Then
        Classification = 1
        rule_applied = benign_rule
    ElseIf isLikelyPathogenic Then
        Classification = 4
        rule_applied = lpath_rule
    ElseIf isLikelyBenign Then
        Classification = 2
        rule_applied = lbenign_rule
    Else
        MsgBox "Error. No classification could be assigned."
    End If
    
    Debug.Print "isPathogenic", isPathogenic
    Debug.Print "isLikelyPathogenic", isLikelyPathogenic
    Debug.Print "isLikelyBenign", isLikelyBenign
    Debug.Print "isBenign", isBenign
    Debug.Print "isUncertain", isUncertain
    Debug.Print "classification", Classification, rule_applied
    
    ' Return an array containing (ACMG classification As Integer, Rule Applied As String)
    GetACMGClassification = Array(Classification, rule_applied)
    
End Function

' #####
' # User Interface Events
' #####

Private Sub Calculate_Click()
    ' Calculate the ACMG classification from selected evidence categories and update Moka database record.
    Dim Dbs As dao.Database
    Dim rsStatus As dao.Recordset

    Dim acmg_classification As Integer
    Dim rule_applied As String
    
    ' Create a dictionary to hold mappings between calculated classification and its dbo.Status.StatusID record.
    '    Required to udpate the Me.Classification combo box using the StatusID.
    Dim class_status
    Set class_status = CreateObject("scripting.dictionary")
    ' Set the dbo.Status.StatusID values for the
    ' scripting.dictionary sets values As String type by default. Use CLng to convert to Long Integer,
    '    required to match the StatusID data type in SQL queries.
    class_status.Add 1, CLng(1202218821)
    class_status.Add 2, CLng(1202218779)
    class_status.Add 3, CLng(1202218781)
    class_status.Add 4, CLng(1202218783)
    class_status.Add 5, CLng(1202218788)
    ' Save the current record open in the form, updating the database with all selected ACMG criteria
    DoCmd.RunCommand acCmdSaveRecord
    
    ' Update form counter controls using selected ACMG tickboxes:
    Call SetEvidenceCounts
    
    'Calculate the ACMG Classification score and corresponding status
    class_array = Me.GetACMGClassification
    acmg_classification = class_array(0)
    rule_applied = class_array(1)
    Debug.Print "Calculate_Click:", acmg_classification, rule_applied

    'Get Status text for the calculated ACMG classification.
    strSQL = "SELECT StatusID, Status FROM Status WHERE Pathogenic = 1 AND StatusID = " & class_status(acmg_classification)
    Set Dbs = CurrentDb
    Set rsStatus = Dbs.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)
    Debug.Print acmg_classification, rsStatus!Status, rule_applied

    ' Check if the form is in Edit Mode. Returns False for tests with Status 'complete'.
    If Me.AllowEdits Then
        ' Display the classification and rule applied. Ask the user if they want to save the classification.
        If vbYes = MsgBox( _
            "The calculated classification is: " & rsStatus!Status & vbNewLine & "Rule Applied: " & rule_applied & vbNewLine & _
            "Would you like to update the classification of the variant?", vbYesNo, "Update Classification?" _
            ) Then _
            ' Display the rule in the ACMG rule invoked textbox and update the Variant Classificaiton combo box.
            Me.rule = rule_applied
            Me.Classification = rsStatus!StatusID
            ' Log classification update in NGSMemo and PatientLog tables. Display Classification on WES results page.
            Call Classification_log
        End If
    End If

    rsStatus.close
    DoCmd.RunCommand acCmdSaveRecord
End Sub

Private Sub NGSVariant_comment_AfterUpdate()
    'Updates the patient log and NGS log tables when the variant comment is updated
    Dim date_now As String
    Dim UserName As String
    Dim PCName As String
    Dim RC As String
    Dim sqlMemo As String
    Dim sqlPatLog As String
    'capture details to be inserted into logs
    date_now = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
    UserName = VBA.Environ("USERNAME")
    PCName = VBA.Environ("COMPUTERNAME")
    'If the comment has been deleted, record that it has been deleted
    If Me.NGSVariant_comment.Value = "" Then
        sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" & Me.InternalPatientID & ", 2, " & Me.NGSVariantID & ",'Variant comment deleted.',#" & date_now & "#,'" & UserName & "','" & PCName & "')"
        sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & Me.InternalPatientID & ", 'NGS: Variant comment for NGSVariantID " & Me.NGSVariantID & " deleted.', #" & date_now & "#,'" & UserName & "','" & PCName & "')"
    'If the comment has been edited (rather than deleted), record what it has been updated to in log.
    Else
        'Capture the comment from the comment box, escaping any single quotes to prevent SQL errors
        RC = Replace(Me.NGSVariant_comment.Value, "'", "''")
        sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" & Me.InternalPatientID & ", 2, " & Me.NGSVariantID & ",'Variant comment updated - " & RC & "',#" & date_now & "#,'" & UserName & "','" & PCName & "')"
        sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & Me.InternalPatientID & ", 'NGS: Variant comment for NGSVariantID " & Me.NGSVariantID & " updated.', #" & date_now & "#,'" & UserName & "','" & PCName & "')"
    End If
    'Execute SQL
    DoCmd.SetWarnings False
    DoCmd.RunSQL sqlMemo
    DoCmd.RunSQL sqlPatLog
    DoCmd.SetWarnings True
    'Save record then update the variant table on results page
    DoCmd.RunCommand acCmdSaveRecord
    Form_s0901_NGSVariants.Requery
End Sub

Private Sub Classification_AfterUpdate()
    'After classification is manually updated, call the classification_log function
    Call Classification_log
End Sub

Private Sub Close_Click()
    'Close the form
    DoCmd.close
End Sub

Private Sub rule_DblClick(Cancel As Integer)
    'Opens a form that displays all of the ACMG rules for classification
    DoCmd.OpenForm "s0901_NGSVariantACMGPopupRules"
End Sub

Private Sub Open_WES_Guide(anchor As String)
    'Open the WES ACMG guidance on sharepoint.
    '    Args:
    '        anchor: Anchor tags have been placed in the WES ACMG form. Passing one of the following will append to the URL and open the page at that section:
    '            ["path_vstrong", "path_strong", "path_mod", "path_supp", "ben_standalone", "ben_strong", "ben_supp"]
    Dim url As String
    url = "https://viapath.sharepoint.com/sites/analytics/WES%20ACMG%20Guidance%20Guys/Home.aspx?#" + anchor
    firefoxurl url
End Sub

' ## *_Label_Click: Open the WES ACMG Guidance at the relevant section for this label
Private Sub PVS1_Label_Click()
    Open_WES_Guide ("path_vstrong")
End Sub

Private Sub PS1_Label_Click()
    Open_WES_Guide ("path_strong")
End Sub

Private Sub PS2_Label_Click()
    Open_WES_Guide ("path_strong")
End Sub

Private Sub PS3_Label_Click()
    Open_WES_Guide ("path_strong")
End Sub

Private Sub PS4_Label_Click()
    Open_WES_Guide ("path_strong")
End Sub

Private Sub PM1_Label_Click()
    Open_WES_Guide ("path_mod")
End Sub

Private Sub PM2_Label_Click()
    Open_WES_Guide ("path_mod")
End Sub

Private Sub PM3_Label_Click()
    Open_WES_Guide ("path_mod")
End Sub

Private Sub PM4_Label_Click()
    Open_WES_Guide ("path_mod")
End Sub

Private Sub PM5_Label_Click()
    Open_WES_Guide ("path_mod")
End Sub

Private Sub PM6_Label_Click()
    Open_WES_Guide ("path_mod")
End Sub

Private Sub PP1_Label_Click()
    Open_WES_Guide ("path_supp")
End Sub

Private Sub PP2_Label_Click()
    Open_WES_Guide ("path_supp")
End Sub

Private Sub PP3_Label_Click()
    Open_WES_Guide ("path_supp")
End Sub

Private Sub PP4_Label_Click()
    Open_WES_Guide ("path_supp")
End Sub

Private Sub PP5_Label_Click()
    Open_WES_Guide ("path_supp")
End Sub

Private Sub BA1_Label_Click()
    Open_WES_Guide ("ben_standalone")
End Sub

Private Sub BS1_Label_Click()
    Open_WES_Guide ("ben_strong")
End Sub

Private Sub BS2_Label_Click()
    Open_WES_Guide ("ben_strong")
End Sub

Private Sub BS3_Label_Click()
    Open_WES_Guide ("ben_strong")
End Sub

Private Sub BS4_Label_Click()
    Open_WES_Guide ("ben_strong")
End Sub

Private Sub BP1_Label_Click()
    Open_WES_Guide ("ben_supp")
End Sub

Private Sub BP2_Label_Click()
    Open_WES_Guide ("ben_supp")
End Sub

Private Sub BP3_Label_Click()
    Open_WES_Guide ("ben_supp")
End Sub

Private Sub BP4_Label_Click()
    Open_WES_Guide ("ben_supp")
End Sub

Private Sub BP5_Label_Click()
    Open_WES_Guide ("ben_supp")
End Sub

Private Sub BP6_Label_Click()
    Open_WES_Guide ("ben_supp")
End Sub

Private Sub BP7_Label_Click()
    Open_WES_Guide ("ben_supp")
End Sub

Private Sub WESGuideBox1_DblClick(Cancel As Integer)
  ' Open the WES guide homepage (empty string)
  Open_WES_Guide ("")
End Sub

Private Sub WESGuideBox2_DblClick(Cancel As Integer)
  ' Open the WES guide homepage (empty string)
  Open_WES_Guide ("")
End Sub

' ## *_Frame_AfterUpdate: Update the patient log with the human-readable value of the ACMG criteria tickbox selection.
'        Note: Empty fields are logged with the string 'Null' as the VBA Null value cannot be inserted into SQL statements.
Private Sub PVS1_Frame_AfterUpdate()
    If IsNull(PVS1_Frame.Value) Then
        OptionBox_Log PVS1_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PVS1_Frame.ControlSource, PVS1_Frame.Value
    End If
End Sub

Private Sub PS1_Frame_AfterUpdate()
    If IsNull(PS1_Frame.Value) Then
        OptionBox_Log PS1_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PS1_Frame.ControlSource, PS1_Frame.Value
    End If
End Sub

Private Sub PS2_Frame_AfterUpdate()
    If IsNull(PS2_Frame.Value) Then
        OptionBox_Log PS2_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PS2_Frame.ControlSource, PS2_Frame.Value
    End If
End Sub

Private Sub PS3_Frame_AfterUpdate()
    If IsNull(PS3_Frame.Value) Then
        OptionBox_Log PS3_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PS3_Frame.ControlSource, PS3_Frame.Value
    End If
End Sub

Private Sub PS4_Frame_AfterUpdate()
    If IsNull(PS4_Frame.Value) Then
        OptionBox_Log PS4_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PS4_Frame.ControlSource, PS4_Frame.Value
    End If
End Sub

Private Sub PM1_Frame_AfterUpdate()
    If IsNull(PM1_Frame.Value) Then
        OptionBox_Log PM1_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PM1_Frame.ControlSource, PM1_Frame.Value
    End If
End Sub

Private Sub PM2_Frame_AfterUpdate()
    If IsNull(PM2_Frame.Value) Then
        OptionBox_Log PM2_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PM2_Frame.ControlSource, PM2_Frame.Value
    End If
End Sub

Private Sub PM3_Frame_AfterUpdate()
    If IsNull(PM3_Frame.Value) Then
        OptionBox_Log PM3_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PM3_Frame.ControlSource, PM3_Frame.Value
    End If
End Sub

Private Sub PM4_Frame_AfterUpdate()
    If IsNull(PM4_Frame.Value) Then
        OptionBox_Log PM4_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PM4_Frame.ControlSource, PM4_Frame.Value
    End If
End Sub

Private Sub PM5_Frame_AfterUpdate()
    If IsNull(PM5_Frame.Value) Then
        OptionBox_Log PM5_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PM5_Frame.ControlSource, PM5_Frame.Value
    End If
End Sub

Private Sub PM6_Frame_AfterUpdate()
    If IsNull(PM6_Frame.Value) Then
        OptionBox_Log PM6_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PM6_Frame.ControlSource, PM6_Frame.Value
    End If
End Sub

Private Sub PP1_Frame_AfterUpdate()
    If IsNull(PP1_Frame.Value) Then
        OptionBox_Log PP1_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PP1_Frame.ControlSource, PP1_Frame.Value
    End If
End Sub

Private Sub PP2_Frame_AfterUpdate()
    If IsNull(PP2_Frame.Value) Then
        OptionBox_Log PP2_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PP2_Frame.ControlSource, PP2_Frame.Value
    End If
End Sub

Private Sub PP3_Frame_AfterUpdate()
    If IsNull(PP3_Frame.Value) Then
        OptionBox_Log PP3_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PP3_Frame.ControlSource, PP3_Frame.Value
    End If
End Sub

Private Sub PP4_Frame_AfterUpdate()
    If IsNull(PP4_Frame.Value) Then
        OptionBox_Log PP4_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PP4_Frame.ControlSource, PP4_Frame.Value
    End If
End Sub

Private Sub PP5_Frame_AfterUpdate()
    If IsNull(PP5_Frame.Value) Then
        OptionBox_Log PP5_Frame.ControlSource, "Null"
    Else
        OptionBox_Log PP5_Frame.ControlSource, PP5_Frame.Value
    End If
End Sub

Private Sub BA1_Frame_AfterUpdate()
    If IsNull(BA1_Frame.Value) Then
        OptionBox_Log BA1_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BA1_Frame.ControlSource, BA1_Frame.Value
    End If
End Sub

Private Sub BS1_Frame_AfterUpdate()
    If IsNull(BS1_Frame.Value) Then
        OptionBox_Log BS1_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BS1_Frame.ControlSource, BS1_Frame.Value
    End If
End Sub

Private Sub BS2_Frame_AfterUpdate()
    If IsNull(BS2_Frame.Value) Then
        OptionBox_Log BS2_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BS2_Frame.ControlSource, BS2_Frame.Value
    End If
End Sub

Private Sub BS3_Frame_AfterUpdate()
    If IsNull(BS3_Frame.Value) Then
        OptionBox_Log BS3_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BS3_Frame.ControlSource, BS3_Frame.Value
    End If
End Sub

Private Sub BS4_Frame_AfterUpdate()
    If IsNull(BS4_Frame.Value) Then
        OptionBox_Log BS4_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BS4_Frame.ControlSource, BS4_Frame.Value
    End If
End Sub

Private Sub BP1_Frame_AfterUpdate()
    If IsNull(BP1_Frame.Value) Then
        OptionBox_Log BP1_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BP1_Frame.ControlSource, BP1_Frame.Value
    End If
End Sub

Private Sub BP2_Frame_AfterUpdate()
    If IsNull(BP2_Frame.Value) Then
        OptionBox_Log BP2_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BP2_Frame.ControlSource, BP2_Frame.Value
    End If
End Sub

Private Sub BP3_Frame_AfterUpdate()
    If IsNull(BP3_Frame.Value) Then
        OptionBox_Log BP3_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BP3_Frame.ControlSource, BP3_Frame.Value
    End If
End Sub

Private Sub BP4_Frame_AfterUpdate()
    If IsNull(BP4_Frame.Value) Then
        OptionBox_Log BP4_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BP4_Frame.ControlSource, BP4_Frame.Value
    End If
End Sub

Private Sub BP5_Frame_AfterUpdate()
    If IsNull(BP5_Frame.Value) Then
        OptionBox_Log BP5_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BP5_Frame.ControlSource, BP5_Frame.Value
    End If
End Sub

Private Sub BP6_Frame_AfterUpdate()
    If IsNull(BP6_Frame.Value) Then
        OptionBox_Log BP6_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BP6_Frame.ControlSource, BP6_Frame.Value
    End If
End Sub

Private Sub BP7_Frame_AfterUpdate()
    If IsNull(BP7_Frame.Value) Then
        OptionBox_Log BP7_Frame.ControlSource, "Null"
    Else
        OptionBox_Log BP7_Frame.ControlSource, BP7_Frame.Value
    End If
End Sub

' ## *_comment_AfterUpdate: Call the ACMG comment log whenever a comment field is updated for an ACMG criteria

Private Sub PVS1_comment_AfterUpdate()
    Call acmg_comment_log("PVS1_comment")
End Sub
Private Sub PS1_comment_AfterUpdate()
    Call acmg_comment_log("PS1_comment")
End Sub
Private Sub PS2_comment_AfterUpdate()
    Call acmg_comment_log("PS2_comment")
End Sub
Private Sub PS3_comment_AfterUpdate()
    Call acmg_comment_log("PS3_comment")
End Sub
Private Sub PS4_comment_AfterUpdate()
    Call acmg_comment_log("PS4_comment")
End Sub
Private Sub PM1_comment_AfterUpdate()
    Call acmg_comment_log("PM1_comment")
End Sub
Private Sub PM2_comment_AfterUpdate()
    Call acmg_comment_log("PM2_comment")
End Sub
Private Sub PM3_comment_AfterUpdate()
    Call acmg_comment_log("PM3_comment")
End Sub
Private Sub PM4_comment_AfterUpdate()
    Call acmg_comment_log("PM4_comment")
End Sub
Private Sub PM5_comment_AfterUpdate()
    Call acmg_comment_log("PM5_comment")
End Sub
Private Sub PM6_comment_AfterUpdate()
    Call acmg_comment_log("PM6_comment")
End Sub
Private Sub PP1_comment_AfterUpdate()
    Call acmg_comment_log("PP1_comment")
End Sub
Private Sub PP2_comment_AfterUpdate()
    Call acmg_comment_log("PP2_comment")
End Sub
Private Sub PP3_comment_AfterUpdate()
    Call acmg_comment_log("PP3_comment")
End Sub
Private Sub PP4_comment_AfterUpdate()
    Call acmg_comment_log("PP4_comment")
End Sub
Private Sub PP5_comment_AfterUpdate()
    Call acmg_comment_log("PP5_comment")
End Sub
Private Sub BP1_comment_AfterUpdate()
    Call acmg_comment_log("BP1_comment")
End Sub
Private Sub BP2_comment_AfterUpdate()
    Call acmg_comment_log("BP2_comment")
End Sub
Private Sub BP3_comment_AfterUpdate()
    Call acmg_comment_log("BP3_comment")
End Sub
Private Sub BP4_comment_AfterUpdate()
    Call acmg_comment_log("BP4_comment")
End Sub
Private Sub BP5_comment_AfterUpdate()
    Call acmg_comment_log("BP5_comment")
End Sub
Private Sub BP6_comment_AfterUpdate()
    Call acmg_comment_log("BP6_comment")
End Sub
Private Sub BP7_comment_AfterUpdate()
    Call acmg_comment_log("BP7_comment")
End Sub
Private Sub BS1_comment_AfterUpdate()
    Call acmg_comment_log("BS1_comment")
End Sub
Private Sub BS2_comment_AfterUpdate()
    Call acmg_comment_log("BS2_comment")
End Sub
Private Sub BS3_comment_AfterUpdate()
    Call acmg_comment_log("BS3_comment")
End Sub
Private Sub BS4_comment_AfterUpdate()
    Call acmg_comment_log("BS4_comment")
End Sub
Private Sub BA1_comment_AfterUpdate()
    Call acmg_comment_log("BA1_comment")
End Sub

' ## *_Clear_Click() - Reset criteria to Null in NGSVariantACMG table and resets tick-boxes. Bound to criteria clear (X) buttons.
Private Sub PVS1_Clear_Click()
Me.PVS1_Frame = Null
PVS1_Frame_AfterUpdate
End Sub
Private Sub PS1_Clear_Click()
Me.PS1_Frame = Null
PS1_Frame_AfterUpdate
End Sub
Private Sub PS2_Clear_Click()
Me.PS2_Frame = Null
PS2_Frame_AfterUpdate
End Sub
Private Sub PS3_Clear_Click()
Me.PS3_Frame = Null
PS3_Frame_AfterUpdate
End Sub
Private Sub PS4_Clear_Click()
Me.PS4_Frame = Null
PS4_Frame_AfterUpdate
End Sub
Private Sub PM1_Clear_Click()
Me.PM1_Frame = Null
PM1_Frame_AfterUpdate
End Sub
Private Sub PM2_Clear_Click()
Me.PM2_Frame = Null
PM2_Frame_AfterUpdate
End Sub
Private Sub PM3_Clear_Click()
Me.PM3_Frame = Null
PM3_Frame_AfterUpdate
End Sub
Private Sub PM4_Clear_Click()
Me.PM4_Frame = Null
PM4_Frame_AfterUpdate
End Sub
Private Sub PM5_Clear_Click()
Me.PM5_Frame = Null
PM5_Frame_AfterUpdate
End Sub
Private Sub PM6_Clear_Click()
Me.PM6_Frame = Null
PM6_Frame_AfterUpdate
End Sub
Private Sub PP1_Clear_Click()
Me.PP1_Frame = Null
PP1_Frame_AfterUpdate
End Sub
Private Sub PP2_Clear_Click()
Me.PP2_Frame = Null
PP2_Frame_AfterUpdate
End Sub
Private Sub PP3_Clear_Click()
Me.PP3_Frame = Null
PP3_Frame_AfterUpdate
End Sub
Private Sub PP4_Clear_Click()
Me.PP4_Frame = Null
PP4_Frame_AfterUpdate
End Sub
Private Sub PP5_Clear_Click()
Me.PP5_Frame = Null
PP5_Frame_AfterUpdate
End Sub
Private Sub BA1_Clear_Click()
Me.BA1_Frame = Null
BA1_Frame_AfterUpdate
End Sub
Private Sub BS1_Clear_Click()
Me.BS1_Frame = Null
BS1_Frame_AfterUpdate
End Sub
Private Sub BS2_Clear_Click()
Me.BS2_Frame = Null
BS2_Frame_AfterUpdate
End Sub
Private Sub BS3_Clear_Click()
Me.BS3_Frame = Null
BS3_Frame_AfterUpdate
End Sub
Private Sub BS4_Clear_Click()
Me.BS4_Frame = Null
BS4_Frame_AfterUpdate
End Sub
Private Sub BP1_Clear_Click()
Me.BP1_Frame = Null
BP1_Frame_AfterUpdate
End Sub
Private Sub BP2_Clear_Click()
Me.BP2_Frame = Null
BP2_Frame_AfterUpdate
End Sub
Private Sub BP3_Clear_Click()
Me.BP3_Frame = Null
BP3_Frame_AfterUpdate
End Sub
Private Sub BP4_Clear_Click()
Me.BP4_Frame = Null
BP4_Frame_AfterUpdate
End Sub
Private Sub BP5_Clear_Click()
Me.BP5_Frame = Null
BP5_Frame_AfterUpdate
End Sub
Private Sub BP6_Clear_Click()
Me.BP6_Frame = Null
BP6_Frame_AfterUpdate
End Sub
Private Sub BP7_Clear_Click()
Me.BP7_Frame = Null
BP7_Frame_AfterUpdate
End Sub

' #####
' Loggers
' #####
Private Function Classification_log()
    'Create an entry in the NGSMemo and PatientLog tables to indicate that the classification has been updated.
    '    Pulls classification from Me.Classification combo box, therefore this value must be set before calling function.
    '    Returns: None
    Dim date_now As String
    Dim UserName As String
    Dim PCName As String
    Dim Classification As String
    ' Capture details to be inserted into logs
    date_now = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
    UserName = VBA.Environ("USERNAME")
    PCName = VBA.Environ("COMPUTERNAME")
    patID = Me.InternalPatientID
    Classification = Me.Classification.Column(1) 'This is the statusID of the current classification in the combo box
    sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" & CStr(patID) & ", 2, " & CStr(Me.NGSVariantID) & ",'Variant classification updated to: " & Classification & "',#" & date_now & "#,'" & UserName & "','" & PCName & "')"
    sqlPatLogVar = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Variant classification for NGSVariantID " & Me.NGSVariantID & " updated to: " & Classification & "', #" & date_now & "#,'" & UserName & "','" & PCName & "')"
    DoCmd.SetWarnings False ' Turn System Messages off
    DoCmd.RunSQL sqlMemo
    DoCmd.RunSQL sqlPatLogVar
    DoCmd.SetWarnings True
    'Save the record and update the NGSVariant table to display the new classification on the WES results page
    DoCmd.RunCommand acCmdSaveRecord
    Form_s0901_NGSVariants.Requery
End Function

Private Function acmg_comment_log(comment_field)
    'Takes the name of the comment field that has been updated as an argument
    'Updates the patient log and NGS log tables when a comment for one of the ACMG fields is updated
    Dim date_now As String
    Dim UserName As String
    Dim PCName As String
    Dim RC As String
    Dim sqlPatLog As String
    'capture details to be inserted into logs
    date_now = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
    UserName = VBA.Environ("USERNAME")
    PCName = VBA.Environ("COMPUTERNAME")
    'If the comment has been deleted, record that it has been deleted
    'Me.Controls(comment_field).Value will return the comment string from the field that has been updated
    If Me.Controls(comment_field).Value = "" Then
        sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & Me.InternalPatientID & ", 'NGS: ACMG " & comment_field & " deleted for NGSVariantID " & Me.NGSVariantID & ".', #" & date_now & "#,'" & UserName & "','" & PCName & "')"
    'If the comment has been edited (rather than deleted), record what it has been updated to in log.
    Else
        'Capture the comment from the comment box, escaping any single quotes to prevent SQL errors
        RC = Replace(Me.Controls(comment_field).Value, "'", "''")
        sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & Me.InternalPatientID & ", 'NGS: ACMG " & comment_field & " updated for NGSVariantID " & Me.NGSVariantID & ".', #" & date_now & "#,'" & UserName & "','" & PCName & "')"
    End If
    'Execute SQL
    DoCmd.SetWarnings False
    DoCmd.RunSQL sqlPatLog
    DoCmd.SetWarnings True
End Function

Private Function OptionBox_Log(box_name As String, box_value As String)
    ' Updates the NGSMemo and PatientLog tables when an ACMG criteria tickbox is updated.
    '    Args:
    '        box_name: The record source for an ACMG criteria option box e.g. 'PVS1'
    '        box_value: The value of an ACMG criteria tickbox e.g. '3366'. These map to criteria strength labels in dbo.Item
    '            The item table is queried for the evidence label string unless box_value = "Null".

    ' Objects for querying the moka database
    Dim Dbs As dao.Database
    Dim rsItem As dao.Recordset
    
    Dim date_now As String
    Dim UserName As String
    Dim PCName As String
    Dim sqlMemo As String
    Dim sqlPatLog As String
    Dim hrBoxValue As String
    

    ' Capture details to be inserted into logs
    date_now = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
    UserName = VBA.Environ("USERNAME")
    PCName = VBA.Environ("COMPUTERNAME")
    patID = Me.InternalPatientID
    
    ' Set the human-readable box value by querying the box_value argument against dbo.Item.ItemID.
    '     VBA Null cannot be passed as a argument, so the string "Null" is expected if this argument is empty.
    If box_value = "Null" Then
        hrBoxValue = "Null"
    Else
        Set Dbs = CurrentDb
        Set rsItem = Dbs.OpenRecordset("SELECT Item FROM Item WHERE ItemID = " & box_value)
        hrBoxValue = rsItem!Item
        rsItem.close
    End If
    
    ' Define and Execute SQL
    sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" & CStr(patID) & ", 2, " & CStr(Me.NGSVariantID) & ",'" & box_name & " has been updated to " & hrBoxValue & ".',#" & date_now & "#,'" & UserName & "','" & PCName & "')"
    sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: " & box_name & " box for NGSVariantID " & Me.NGSVariantID & " has been updated to " & hrBoxValue & ".', #" & date_now & "#,'" & UserName & "','" & PCName & "')"
    DoCmd.SetWarnings False
    DoCmd.RunSQL sqlMemo
    DoCmd.RunSQL sqlPatLog
    DoCmd.SetWarnings True
End Function

