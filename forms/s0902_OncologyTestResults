Option Compare Database

Private Sub Form_Load()
' If genome build has not been set, set to default  109 = HG19
If IsNull(Me![ResultBuild]) Then
    Me!ResultBuild = 109
End If

'Find number of other variants within +/- 2bp and add to NGSVariant table
Dim sqlPrevVars As String
Dim rsPrevVar As ADODB.Recordset
sqlPrevVars = "SELECT NGSVariant.NGSVariantID, (SELECT Count(*) FROM NGSVariant WHERE NGSVariant.NGSTestID <> currentVar.NGSTestID AND NGSVariant.ChrID=currentVar.ChrID AND NGSVariant.Position_hg19>=(currentVar.Position_hg19-2) And NGSVariant.Position_hg19<=(currentVar.Position_hg19+Len(currentVar.ref)+1)) AS countPrev FROM NGSVariant AS currentVar INNER JOIN NGSVariant ON currentVar.NGSVariantID = NGSVariant.NGSVariantID WHERE NGSVariant.NGSTestID = " & Me.Parent.NGSTestID
Set rsPrevVar = New ADODB.Recordset
rsPrevVar.Open sqlPrevVars, CurrentProject.Connection, adOpenKeyset
While Not rsPrevVar.EOF
    sqlUpdate = "UPDATE NGSVariant SET relVars = " & rsPrevVar.Fields("countPrev") & " WHERE NGSVariantID = " & rsPrevVar.Fields("NGSVariantID")
    DoCmd.SetWarnings False
    DoCmd.RunSQL sqlUpdate
    DoCmd.SetWarnings True
    rsPrevVar.MoveNext
Wend
Set rsPrevVar = Nothing
Me.Requery 'Update variant subform

End Sub


Private Sub RemoveAll_MouseDown(Button As Integer, Shift As Integer, x As Single, Y As Single)
    'Removes variants and vcf/filter settings for test. Have to press ctrl and click to prevent accidental removal.
    If Shift = acCtrlMask Then
        If MsgBox("WARNING: This will remove all variants for this NGS test." & vbNewLine & vbNewLine & "Are you sure you REALLY want to proceed??", vbYesNo + vbExclamation, "WARNING") = vbYes Then
            d = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
            un = VBA.Environ("USERNAME")
            cn = VBA.Environ("COMPUTERNAME")
            patID = Me.Parent.InternalPatientID
            Dim rsVarsForDel As ADODB.Recordset
            Set rsVarsForDel = New ADODB.Recordset
            'Record variants and files being deleted in logs
            sqlVarsForDel = "SELECT NGSVariant.NGSVariantID FROM NGSVariant WHERE NGSTestID = " & Me.Parent.NGSTestID
            rsVarsForDel.Open sqlVarsForDel, CurrentProject.Connection, adOpenKeyset
            While Not rsVarsForDel.EOF
                sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(patID) + ", 2, " + CStr(rsVarsForDel.Fields("NGSVariantID")) + ",'Variant deleted.',#" + d + "#,'" + un + "','" + cn + "')"
                sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Variant deleted. NGSVariantID: " & CStr(rsVarsForDel.Fields("NGSVariantID")) & "', #" + d + "#,'" + un + "','" + cn + "')"
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlMemo
                DoCmd.RunSQL sqlPatLog
                DoCmd.SetWarnings True
                rsVarsForDel.MoveNext
            Wend
            Set rsVarsForDel = Nothing
            Dim rsFilesForDel As ADODB.Recordset
            Set rsFilesForDel = New ADODB.Recordset
            sqlFilesForDel = "SELECT NGSTestFile.NGSTestID, NGSTestFile.Description FROM NGSTestFile WHERE NGSTestFile.NGSTestID = " & Me.Parent.NGSTestID & " AND NGSTestFile.VCF_Filter_Import = TRUE"
            rsFilesForDel.Open sqlFilesForDel, CurrentProject.Connection, adOpenKeyset
            While Not rsFilesForDel.EOF
                sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: File removed from NGS test record. (NGSTestFile Description: " & rsFilesForDel.Fields("Description") & ", NGSTestID: " & rsFilesForDel.Fields("NGSTestID") & ")', #" + d + "#,'" + un + "','" + cn + "')"
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlPatLog
                DoCmd.SetWarnings True
                rsFilesForDel.MoveNext
            Wend
            Set rsFilesForDel = Nothing
            'Remove variants and files
            sqlRemoveAnnot = "DELETE FROM NGSVariantAnnotations WHERE NGSVariantAnnotations.NGSVariantAnnotationsID IN (SELECT NGSVariantAnnotations.NGSVariantAnnotationsID FROM NGSVariant INNER JOIN NGSVariantAnnotations ON NGSVariant.NGSVariantID = NGSVariantAnnotations.NGSVariantID WHERE NGSVariant.NGSTestID = " & Me.Parent.NGSTestID & ")"
            sqlRemoveVars = "DELETE FROM NGSVariant WHERE NGSVariant.NGSTestID = " & Me.Parent.NGSTestID
            sqlRemoveFiles = "DELETE FROM NGSTestFile WHERE NGSTestFile.NGSTestID = " & Me.Parent.NGSTestID & " AND NGSTestFile.VCF_Filter_Import = TRUE"
            DoCmd.SetWarnings False
            DoCmd.RunSQL sqlRemoveAnnot
            DoCmd.RunSQL sqlRemoveVars
            DoCmd.RunSQL sqlRemoveFiles
            DoCmd.SetWarnings True
            Me.Requery
        End If
    Else
        MsgBox "If you REALLY want to delete all variants, you must press Ctrl when clicking the button", vbExclamation, ""
    End If
End Sub

Private Sub txt_Resultcmt_GotFocus()
    Me.txt_Resultcmt.SelLength = 0
End Sub

Private Sub VCFImport_Click()
    Dim destBaseDir As String
    Dim vcfBaseDir As String
    Dim year_dir As String
    Dim month_dir As String
    Dim patID As String
    Dim NGSTestID As Integer
    Dim fDialog As Office.FileDialog
    Dim selectedFile As Variant
    Dim pythonPath As String
    Dim ScriptPath As String
    Dim csFileLst  As String
    Set vcfDict = CreateObject("scripting.dictionary")
    Dim loopcount As Integer
    Dim errReport As String
    Dim un As String
    Dim cn As String
    Dim sqlAddFilePath As String
    Dim sqlPatLogVar As String
    Dim sqlPatLogvcf As String
    
    
    
    On Error GoTo ErrHandler
    'Where to find files to this directory (where to open the file picker)
    vcfBaseDir = "\\gstt.local\Shared\Genetics\Cancer_Genetics\Ingenuity_VCFs\"
    
    ' Start of path for directory that files are to be moved to
    destBaseDir = "\\gstt.local\Apps\Moka\Files\ngs\"
    ' path for year
    year_dir = destBaseDir & Year(Now()) & "\"
    ' path for month
    month_dir = year_dir & Month(Now()) & "\"

    
    'If year folder doesn't already exist, create it
    If Len(Dir(year_dir, vbDirectory)) = 0 Then
        MkDir year_dir
    End If
    'If month folder doesn't already exist, create it
    If Len(Dir(month_dir, vbDirectory)) = 0 Then
        MkDir month_dir
    End If
    
   ' Set up the File Dialog.
   Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
   ' loop through
   With fDialog

      ' Allow user to make multiple selections in dialog box
      .AllowMultiSelect = True

      ' Set the title of the dialog box.
      .Title = "Please select one or more VCF files"

      ' Show the dialog box. If the .Show method returns True, the
      ' user picked at least one file. If the .Show method returns
      ' False, the user clicked Cancel.
      If .Show = True Then
         'Loop through each file selected and add it to our list box.
         For Each selectedFile In .SelectedItems
            ' identify Oncology runs as filename starting with "ONC"
            ' if it's an WES run can only have a single VCF for each paneltype
            ' if it's not an Oncology run (split filepath on "\" and take the last element. take lefthand 3 digits and test if == "ONC"
            If Left(Split(selectedFile, "\")(UBound(Split(selectedFile, "\"))), 3) <> "ONC" Then
                'Retrieve the panel type from current file (between first and second hyphen) and everything before the first fullstop
                PanelType = LCase(Split(Split(selectedFile, "-")(1), ".")(0))
                'add 'panel type: filename' to dictionary. If the panel type is already in dictionary display an error message and exit.
                If Not vcfDict.exists(PanelType) Then
                    vcfDict.Add PanelType, selectedFile
                Else
                    MsgBox ("Multiple VCF files found of type: " & PanelType & ". Unable to continue with import")
                    Exit Sub
                End If
            ' if it's an oncology run
            Else
                ' Add the vcf file to the dictionary (to ensure there aren't dictionary keys), with the vcf filename as the PanelType
                ' The panel type is only used in the description of the files added subform
                ' take the file name after the last slash (ignore filepath)
                PanelType_with_Ext = Split(selectedFile, "\")(UBound(Split(selectedFile, "\")))
                ' take the file name without the extenstion
                PanelType = Split(PanelType_with_Ext, ".")(0)
                vcfDict.Add PanelType, selectedFile
            End If
         Next
                
        'empty variable to build comma separated string of filepaths to pass to python script
        csFileLst = ""
        ' count looping through the list
        loopcount = 0
        ' loop through each panel type
        For Each strKey In vcfDict.keys()
            ' Count each panel
            loopcount = loopcount + 1
            ' append the
            csFileLst = csFileLst & vcfDict(strKey)
            If loopcount <> vcfDict.count Then 'If not the last file in list
                csFileLst = csFileLst & ","
            End If
        Next

        'Pass VCF filepath and test details to python script to parse VCF and insert records into Moka NGSVariants table
        Dim wsh As Object
        Set wsh = CreateObject("WScript.Shell")
        ' set path to the python executable
        pythonPath = "\\gstt.local\Shared\Genetics_Data2\Array\Software\Python\python.exe"
        ' set path to the script which will import the variants
        ScriptPath = "\\gstt.local\Apps\Moka\Files\Software\VCFImport\VCFImport.py"
        ' capture the patientID and NGSTestID from the form to pass to python script
        patID = Me.Parent.InternalPatientID
        NGSTestID = Me.Parent.NGSTestID
    
        'Execute python script with required arguments. "2>&1" at the end redirects StdErr (2) to StdOut (1)
        Set wshexec = wsh.Exec("cmd.exe /S /C " & pythonPath & " " & ScriptPath & " """ & csFileLst & """ " & patID & " " & NGSTestID & " 2>&1")
        
        'DoEvents pauses VBA until python script has finished running. wshexec.status is 0 while running and 1 when finished
        Do While wshexec.Status = 0
            DoEvents
        Loop

        'Capture any error messages from python script (StdErr has been redirected to StdOut, see above)
        errReport = wshexec.Stdout.readall()

        ' Report any standard error in msgbox
        If errReport <> "" Then
            MsgBox "The following error was encountered when attempting to import variants from VCF: " & vbNewLine & vbNewLine & errReport, vbCritical, "ERROR"
        ' if there were no issues archive the files onto the F drive.
        Else
            'Files will be copied to a folder with this month WES batch folder on F: drive
            newDir = month_dir
            'Loop through dictionary of VCFs, and move files to F: drive
            For Each strKey In vcfDict.keys()
                'Get the panelType from dictionary key. If Primarypanel or Secondarypanel, change to 'Primary' or 'Secondary'
                PanelType = strKey
                If PanelType = "primarypanel" Then
                    PanelType = "Primary"
                ElseIf PanelType = "secondarypanel" Then
                    PanelType = "Secondary"
                Else
                    PanelType = Split(PanelType, ".")(0)
                End If
                
                'Copy file to F: drive, add to the NGSTestFiles table, and remove original file from S: drive
                Set newNGSTestFile = New ADODB.Recordset
                'Create timestamp
                TodayDate = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
                
                'Create a new record in the NGSTestFile table and retrieve the auto increment ID for newly inserted record
                sqlNewNGSFile = "INSERT INTO NGSTestFile (NGSTestID, Description, DateAdded, VCF_Filter_Import) VALUES (" & NGSTestID & ", " & "'Ingenuity VCF Output - " & PanelType & "',#" & TodayDate & "#, -1)"
                newNGSTestFile.Open sqlNewNGSFile, CurrentProject.Connection, adOpenKeyset
                'Get ID of new entry
                newNGSTestFile.Open "SELECT @@identity", CurrentProject.Connection, adOpenKeyset
                NGSTestFileID = newNGSTestFile.Fields(0).Value
                
                ' the full filepath is recorded in the array
                filenamepath = vcfDict(strKey)
                filenamepath = Replace(filenamepath, "P:\", "\\gstt.local\Shared\Genetics\")
                ' split this path on "\" and take the last item (the filename) using ubound to calculate length of list
                filename = Split(filenamepath, "\")(UBound(Split(filenamepath, "\")))
                
                
                'Add the auto increment ID to the end of the filename (before file extension) to ensure every file has a unique name, then copy file to F: drive.
                'Get the position in the file name where the last full stop is (last part of the file extension)
                dotIndx = InStrRev(filename, ".")
                
                ' if the last part of the file is .gz then it is a zipped file so we need to get the extension before this
                ' we are going to store the uncompressed VCF file only
                ' get everything to the right, and including, the last fullstop - if this is '.gz'
                If Right(filename, Len(filename) - (dotIndx - 1)) = ".gz" Then
                    ' capture the filename excluding the '.gz'
                    filenamenogz = Replace(filename, ".gz", "")
                ' if the file does not end with .gz
                Else
                    ' capture the filename as is
                    filenamenogz = filename
                End If
                

                ' find the index of the last full stop (excluding .gz)
                dotIndx2 = InStrRev(filenamenogz, ".")
                
                ' capture the file name without any extension by taking everything left of the last full stop
                filenameNoExt = Left(filenamenogz, dotIndx2 - 1)
                filename_Ext = Right(filenamenogz, Len(filenamenogz) - (dotIndx2 - 1))
                ' combine all into new file name
                newFileName = filenameNoExt & "_" & NGSTestFileID & filename_Ext
                    
                'Copy file to the F: drive
                FileCopy filenamepath, newDir & newFileName
                'Make copied file read only
                SetAttr newDir & newFileName, vbReadOnly
                
                'Update the NGSTestFile record with the file path of the copied file, and record in patient log
                ' set user variables
                un = VBA.Environ("USERNAME")
                cn = VBA.Environ("COMPUTERNAME")
                ' set the query to add the filepath to the NGSTestfile table
                sqlAddFilePath = "UPDATE NGSTestFile SET NGSTestFile = '" & newDir & newFileName & "' WHERE NGSTestFileID = " & NGSTestFileID
                ' queries to record what has been done in patient log table
                sqlPatLogVar = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Variants uploaded to NGSVariants table from Ingenuity VCF Output - " & PanelType & ". (NGSTest ID: " & NGSTestID & ")', #" + TodayDate + "#,'" + un + "','" + cn + "')"
                sqlPatLogvcf = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Ingenuity VCF Output - " & PanelType & " attached. (NGSTestFile ID: " & NGSTestFileID & ")', #" + TodayDate + "#,'" + un + "','" + cn + "')"
                ' execute the queries
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlAddFilePath
                DoCmd.RunSQL sqlPatLogVar
                DoCmd.RunSQL sqlPatLogvcf
                DoCmd.SetWarnings True
                
                If Right(filename, Len(filename) - (InStrRev(filename, ".") - 1)) = ".gz" Then
                    'remove the temporary unzipped file
                    Kill Replace(filenamepath, ".gz", "")
                    'Remove original file
                    Kill filenamepath
                Else
                    'Remove original file
                    Kill filenamepath
                End If

            ' next panel type in the array
            Next

            'Find number of other variants within +/- 2bp and add to NGSVariant table so it can be displayed in subform
            'Have to do it this way because calculating the count on the fly in subform recordsource query makes the subform read only, so classifcation, comments etc. can't be updated
            'This is recalculated every time the results form is opened, so up to date number is always displayed to user.
            ' Refresh is required to sync imported variants from Python script
            Me.Refresh
            Dim sqlPrevVars As String
            Dim rsPrevVars As ADODB.Recordset
            'Query below returns the variant ID and number of previous records for each variant associated with this test.
            sqlPrevVars = "SELECT NGSVariant.NGSVariantID, (SELECT Count(*) FROM NGSVariant WHERE NGSVariant.NGSTestID <> currentVar.NGSTestID AND NGSVariant.ChrID=currentVar.ChrID AND NGSVariant.Position_hg19>=(currentVar.Position_hg19-2) And NGSVariant.Position_hg19<=(currentVar.Position_hg19+Len(currentVar.ref)+1)) AS countPrev FROM NGSVariant AS currentVar INNER JOIN NGSVariant ON currentVar.NGSVariantID = NGSVariant.NGSVariantID WHERE NGSVariant.NGSTestID = " & NGSTestID
            Set rsPrevVars = New ADODB.Recordset
            rsPrevVars.Open sqlPrevVars, CurrentProject.Connection, adOpenKeyset
            'For each variant, update the relVars field of NGSVariant table
            While Not rsPrevVars.EOF
                sqlUpdate = "UPDATE NGSVariant SET relVars = " & rsPrevVars.Fields("countPrev") & " WHERE NGSVariantID = " & rsPrevVars.Fields("NGSVariantID")
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlUpdate
                DoCmd.SetWarnings True
                rsPrevVars.MoveNext
            Wend
            'unset variables
            Set rsPrevVars = Nothing
            Set wsh = Nothing
            'Requery subform
            Me.Requery
            End If

    Else
         MsgBox "You clicked Cancel in the file dialog box."
    End If
End With

    'Error HANDLER
ErrHandler:
        If Err.Number = -2147024894 Then
            MsgBox "Unable to open file", vbExclamation, "Error"
        ElseIf Err.Number <> 0 Then
            If Err.Number = 75 Then
                MsgBox "Error copying file. Couldn't access source or destination file path.", vbExclamation, "Error"
            Else
                MsgBox "An error has occured. File has not been attached." & vbNewLine & vbNewLine & Err.Number & ": " & Err.Description, vbExclamation, "Error"
            End If
            If Not IsNull(NGSTestFileID) Then 'If a record has been created in NGSTestFile table, remove it because it may be incomplete or link to a non-existing file.
                sqlUndo = "DELETE FROM NGSTestFile WHERE NGSTestFileID = " & NGSTestFileID
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlUndo
                DoCmd.SetWarnings True
                Me.Requery 'Remove deleted row from subform
            End If
        End If
End Sub

Private Sub FilterImport_Click()

    Dim count As Integer
    Dim patID
    Dim NGSTestID As Integer
    Dim specNum As String
    Dim specNumNoSlash As String
    Dim EKnum As String
    Dim filename As String
    Dim filepath As String
    Dim desBaseDir As String
    Dim newNGSTestFile As ADODB.Recordset
    Dim TodayDate As String
    
    filtSrcDir = "\\gstt.local\Shared\Genetics\Cancer_Genetics\Ingenuity_Filter_Settings\"
    destDir = "\\gstt.local\Apps\Moka\Files\ngs\"
    specNum = Me.SpecimenTrustID
    specNumNoSlash = Replace(specNum, "/", "")
    EKnum = Me.EK
    patID = Me.Parent.InternalPatientID
    NGSTestID = Me.Parent.NGSTestID
    year_dir = destDir & Year(Now()) & "\"
    month_dir = year_dir & Month(Now()) & "\"
   
    'Check filter settings file with correct filename exists
    filtBasePath = filtSrcDir & "*" & EKnum & specNumNoSlash & "*.txt"
    matchFile = Dir(filtBasePath)
    
    Do While matchFile <> "" 'Loop until no more files
        count = count + 1
        matchFile = Dir 'Moves to next filename in record
    Loop
    If count = 0 Then 'If no filter settings files found, display error message and exit
        MsgBox "No filter  files found that match test details. Files must be:" & vbNewLine & vbNewLine & _
        "1. Saved with filename format: ONC<...>" & EKnum & specNumNoSlash & "<...>.txt" & vbNewLine & _
        "2. Saved in the following directory: " & filtSrcDir, vbExclamation, "No Filter Settings Files Found"
    ElseIf count > 1 Then
        MsgBox "Multiple filter settings files found that match test details. Can only import one VCF per NGS test.", vbExclamation, "Multiple VCF Files Found"
    Else
        matchFile = Dir(filtBasePath)
        'Display filename and confirm user wants to proceed.
        filepath = filtSrcDir & matchFile
        proceed = MsgBox("The following filter settings file will be attached to this NGS Test:" & vbNewLine & vbNewLine & matchFile & vbNewLine & vbNewLine & "Click OK to proceed.", vbOKCancel + vbInformation, "Confirm Correct File")
        If proceed = vbOK Then
            newDir = month_dir 'Files will be copied to folder on F: drive
            If Len(Dir(year_dir, vbDirectory)) = 0 Then
                MkDir year_dir 'If year folder doesn't already exist, create it
            End If
            If Len(Dir(month_dir, vbDirectory)) = 0 Then
                MkDir month_dir 'If month folder doesn't already exist, create it
            End If
            Set newNGSTestFile = New ADODB.Recordset
            TodayDate = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
            'Create a new record in the NGSTestFile table and retrieve the auto increment ID for newly inserted record
            sqlNewNGSFile = "INSERT INTO NGSTestFile (NGSTestID, Description, DateAdded, VCF_Filter_Import) VALUES (" & NGSTestID & ", " & "'Ingenuity Filter Settings', #" & TodayDate & "#, -1)"
            newNGSTestFile.Open sqlNewNGSFile, CurrentProject.Connection, adOpenKeyset
            newNGSTestFile.Open "SELECT @@identity", CurrentProject.Connection, adOpenKeyset 'Get ID of new entry
            NGSTestFileID = newNGSTestFile.Fields(0).Value
            'Add the auto increment ID to the end of the filename (before file extension) to ensure every file has a unique name, then copy file to F: drive.
            dotIndx = InStrRev(matchFile, ".") 'Index of the start of file extension
            filenameNoExt = Left(matchFile, dotIndx - 1) 'Original filename without extension
            fileExt = Right(matchFile, Len(matchFile) - (dotIndx - 1)) 'File extension including dot
            newFileName = filenameNoExt & "_" & NGSTestFileID & fileExt
            FileCopy filepath, newDir & newFileName 'Copy file to the F: drive
            SetAttr newDir & newFileName, vbReadOnly 'Make copied file read only
            Set rsAddCat = Nothing
            'Update the NGSTestFile record with the file path of the copied file
            sqlAddFilePath = "UPDATE NGSTestFile SET NGSTestFile = '" & newDir & newFileName & "' WHERE NGSTestFileID = " & NGSTestFileID
            DoCmd.SetWarnings False
            DoCmd.RunSQL sqlAddFilePath
            DoCmd.SetWarnings True
            Me.Requery
            d = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
            un = VBA.Environ("USERNAME")
            cn = VBA.Environ("COMPUTERNAME")
            sqlPatLogFil = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Ingenuity Filter Settings file attached. (NGSTestFile ID: " & NGSTestFileID & ")', #" + d + "#,'" + un + "','" + cn + "')"
            DoCmd.SetWarnings False
            DoCmd.RunSQL sqlPatLogFil
            DoCmd.SetWarnings True
            'If all processing above has completed without errors, remove the original file.
            Kill filepath
        End If
    End If
End Sub


Private Sub ResultBuild_AfterUpdate()
    Dim Q As ADODB.Recordset
    Dim S As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    Set Q = New ADODB.Recordset
    If IsNull([WESResultBuild]) Then
        S = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Genome build deleted for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Else
        S = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Genome build changed to Item ID: " + CStr(Me![ResultBuild]) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    End If
    Q.Open S, CurrentProject.Connection
    Set Q = Nothing
End Sub


Private Sub btn_Phenotips_Click()
    Call firefoxurl("http://10.189.213.28:8080/phenotips/bin/")
    'TO DO --> look up API to search for PRU
End Sub


Private Sub StatusID_BeforeUpdate(Cancel As Integer)
' prevent user setting status to NULL
If IsNull(Me.StatusID) Then
    msga = MsgBox("No test status selected." & vbNewLine & "To continue please select a test status.", vbOKOnly Or vbExclamation, "ATTENTION")
    Cancel = True
ElseIf Me.StatusID = 4 And (IsNull(Me.Checker1) Or IsNull(Me.Checker2)) Then
    MsgBox "Please assign an analyst and checker before marking test as complete.", vbExclamation, "Assign Analyst and Checker"
    Cancel = True
End If
End Sub


Private Sub StatusID_AfterUpdate()

    Dim Q As ADODB.Recordset
    Dim U As ADODB.Recordset
    Dim rs As ADODB.Recordset
    Dim l As String
    Dim v As String
    Dim b As String
    Dim dt As String
    Dim usr As String
    Dim cn As String

    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    
    l = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Status updated to " + Me![StatusID].Column(1) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'NGS test status updated to: " + Me![StatusID].Column(1) + "' ,#" + dt + "#,'" + usr + "','" + cn + "')"
    DoCmd.SetWarnings False
    DoCmd.RunSQL l
    DoCmd.RunSQL v
    DoCmd.SetWarnings True
End Sub

Private Sub Checker1_AfterUpdate()
    Dim rs As ADODB.Recordset
    Dim rs2 As ADODB.Recordset
    Dim plSQL As String
    Dim pl2SQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String
    
    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")
 
 ' record log if checker1 entry is removed
 
    If IsNull([Checker1]) Then
        plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Initials for analyst removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
        Me![txt_Check1Date] = Null
        Me![txt_Check1Date].Requery
        rs.Open plSQL, CurrentProject.Connection
        
        If Not IsNull([Checker2]) Then
            Set rs2 = New ADODB.Recordset
            pl2SQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Checker initials (ID:" + CStr(Me![Checker2]) + ") removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![Checker2] = Null
            Me![txt_Check2Date] = Null
            Me![Checker2].Requery
            Me![txt_Check2Date].Requery
            rs2.Open pl2SQL, CurrentProject.Connection
        End If
    Else
         plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Variant interpretation analysis assigned to " + Me![Checker1].Column(1) + " for test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
        rs.Open plSQL, CurrentProject.Connection
    End If

    Set rs = Nothing
    'Refresh fromatting on the page
    Me.Parent.Requery
End Sub


Private Sub txt_Check1Date_DblClick(Cancel As Integer)
    Dim rs As ADODB.Recordset
    Dim plSQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String
    
    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")
    
'prevent check 1 date being updated after a check
If Not IsNull(Checker2) Then
    MsgBox "Report already checked. Unable to update this feild", , "Update not permitted"
    Exit Sub
    
ElseIf Not IsNull([Checker1]) Then
    plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Variant interpretation analysis entered by " + Me![Checker1].Column(1) + " for test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
    Me![txt_Check1Date] = Now()
    Me.[txt_Check1Date].Requery
    rs.Open plSQL, CurrentProject.Connection

Else
    MsgBox "Enter initials into 'Assigned to' field to proceed", , "No Analyst Entered"
End If

    Set rs = Nothing
    'Refresh fromatting on the page
    Me.Parent.Requery

End Sub

Private Sub txt_Check1Date_AfterUpdate()
    Dim rs As ADODB.Recordset
    Dim rs2 As ADODB.Recordset
    Dim plSQL As String
    Dim pl2SQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String
    
    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")
    
    If IsNull([txt_Check1Date]) Then
        plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Analysis date removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
        Me![txt_Check1Date] = Null
        Me![txt_Check1Date].Requery
        rs.Open plSQL, CurrentProject.Connection
        
        If Not IsNull([Checker2]) Then
            Set rs2 = New ADODB.Recordset
            pl2SQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Checker initials (ID:" + CStr(Me![Checker2]) + ") removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![Checker2] = Null
            Me![txt_Check2Date] = Null
            Me![Checker2].Requery
            Me![txt_Check2Date].Requery
            rs2.Open pl2SQL, CurrentProject.Connection
        End If
    End If
    
End Sub


Private Sub Checker2_AfterUpdate()
    Dim rs As ADODB.Recordset
    Dim plSQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String

    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")


'checks checker 1 ID and date has been entered before permitting checker 2 to be entered. Updates patient log accordingly
    If IsNull(Me![Checker1]) Or IsNull(txt_Check1Date) Then
        MsgBox "Unable to add checker until 'Assigned to' initials and associated date are entered", , "No Analyst Entered"
                   Me![Checker2] = Null
           Me![Checker2].Requery
           Me![txt_Check2Date] = Null
           Me![txt_Check2Date].Requery
    
'checks checker 1 ID and checker 2 id are not the same
    ElseIf Me.[Checker2] = Me.[Checker1] Then
           MsgBox "Checked by ID cannot be the same as 'Assigned to'  ", vbOKOnly Or vbExclamation, "Attention"
           Me![Checker2] = Null
           Me![Checker2].Requery
           Me![txt_Check2Date] = Null
           Me![txt_Check2Date].Requery
    
    Else
'logs if checker 2 ID is deleted
        If IsNull([Checker2]) Then
            plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Checker initials removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![txt_Check2Date] = Null
            Me![txt_Check2Date].Requery
            
        Else 'logs if checker 2 ID entry
            plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Result page checked by  " + Me![Checker2].Column(1) + " for test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![txt_Check2Date] = Now()
            Me.[txt_Check2Date].Requery
            'Me.Parent.[SafetyCheck].Value = True
            
        End If
        rs.Open plSQL, CurrentProject.Connection
    End If
    Set rs = Nothing
End Sub


Private Sub txt_Resultcmt_AfterUpdate()
' NGS test results comments/ observations record
    Dim Q As ADODB.Recordset
    Dim R As ADODB.Recordset
    Dim S As String
    Dim t As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
    
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    Set Q = New ADODB.Recordset
    
    'Debug.Print Me.txt_Resultcmt
    
    ' Insert record and comment into PatientLog memo which can then be recalled later with input info.
    If IsNull(Me.txt_Resultcmt) Then
        'Debug.Print "If null test"
        S = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 3," + CStr(Me![NGSTestID]) + ",'NGS Oncology: Result comment deleted for WES test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        'Debug.Print S
    Else
        Dim RC As String
        'Debug.Print " test"
        RC = Replace(Me![txt_Resultcmt], "'", "''")
        S = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 3, " + CStr(Me![NGSTestID]) + ",'NGS Oncology: Result comment updated for WES test requested " + CStr(Me![DateRequested]) + " - " + RC + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        'Debug.Print S
    End If
    Q.Open S, CurrentProject.Connection
    Set Q = Nothing

    ' Record input in the patient log
    Set R = New ADODB.Recordset
    If IsNull([txt_Resultcmt]) Then
        t = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Result comment deleted for WES test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Else
        t = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS Oncology: Result comment updated for WES test requested " + CStr(Me![DateRequested]) + " - see memo log',#" + dt + "#,'" + usr + "','" + cn + "')"
    End If
    R.Open t, CurrentProject.Connection
    Set R = Nothing

End Sub


Private Sub txt_Resultcmt_DblClick(Cancel As Integer)
' View past comment history for test
Me.Dirty = False
Dim stDocName As String
    stDocName = "s0901_NGSLogMemo"
    stLinkCriteria = "[Type] = 3 AND [LinkID] = " & Me![NGSTestID]
    DoCmd.OpenForm stDocName, acFormDS, , stLinkCriteria
End Sub



